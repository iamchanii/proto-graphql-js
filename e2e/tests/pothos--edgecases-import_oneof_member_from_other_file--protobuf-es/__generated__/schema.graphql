type OneofMember1 {
  body: String!
}

input OneofMember1Input {
  body: String!
}

type OneofMember2 {
  count: Int!
}

input OneofMember2Input {
  count: Int!
}

type OneofParent {
  oneofField: OneofParentOneofField
}

input OneofParentInput {
  member1: OneofMember1Input
  member2: OneofMember2Input
}

union OneofParentOneofField = OneofMember1 | OneofMember2

type Query {
  test: OneofParent!
}