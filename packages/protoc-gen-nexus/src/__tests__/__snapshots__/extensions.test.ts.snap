// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`field_nullability generates nexus DSLs with partial inputs: extensions/field_nullability/nullability_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/field_nullability/nullability.proto

/* eslint-disable */

import {
  enumType,
  inputObjectType,
  nonNull,
  nullable,
  objectType,
} from "nexus";
import { stringToNumber } from "proto-nexus";
import { Message as Message1 } from "./testapis/extensions/field_nullability/nullability_pb";

export type testapis$extensions$field_nullability$Message = Message1;
export const Message = objectType({
  name: "Message",
  definition: (t) => {
    t.field("userId", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getUserId();
        return value.toString();
      },
      extensions: {
        protobufField: {
          name: "user_id",
          typeFullName: "uint64",
          options: {
            "[graphql.field]": {
              outputNullability: "NON_NULL",
              inputNullability: "NULLABLE",
              partialInputNullability: "NON_NULL",
            },
          },
        },
      },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
    t.field("status", {
      type: nullable("MessageStatus"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getStatus();
        if (value == null) {
          return null;
        }
        if (value === Message1.Status.STATUS_UNSPECIFIED) {
          return null;
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "status",
          typeFullName: "testapis.extensions.field_nullability.Message.Status",
          options: {
            "[graphql.field]": {
              outputNullability: "NULLABLE",
              inputNullability: "NULLABLE",
            },
          },
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof Message1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$field_nullability$Message",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.field_nullability.Message",
      name: "Message",
      package: "testapis.extensions.field_nullability",
    },
  },
});

export const MessageInput = Object.assign(
  inputObjectType({
    name: "MessageInput",
    definition: (t) => {
      t.field("userId", {
        type: nullable("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (input: NexusGen["inputTypes"]["MessageInput"]): Message1 => {
      const output = new Message1();
      if (input.userId != null) {
        output.setUserId(stringToNumber(input.userId));
      }
      output.setBody(input.body);
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nullable("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);

export const MessagePartialInput = Object.assign(
  inputObjectType({
    name: "MessagePartialInput",
    definition: (t) => {
      t.field("userId", {
        type: nonNull("String"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "user_id",
            typeFullName: "uint64",
            options: {
              "[graphql.field]": {
                outputNullability: "NON_NULL",
                inputNullability: "NULLABLE",
                partialInputNullability: "NON_NULL",
              },
            },
          },
        },
      });
      t.field("body", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
      t.field("status", {
        type: nullable("MessageStatus"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "status",
            typeFullName:
              "testapis.extensions.field_nullability.Message.Status",
            options: {
              "[graphql.field]": {
                outputNullability: "NULLABLE",
                inputNullability: "NULLABLE",
              },
            },
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.field_nullability.Message",
        name: "Message",
        package: "testapis.extensions.field_nullability",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["MessagePartialInput"],
    ): Message1 => {
      const output = new Message1();
      output.setUserId(stringToNumber(input.userId));
      if (input.body != null) {
        output.setBody(input.body);
      }
      if (input.status != null) {
        output.setStatus(input.status);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        userId: {
          type: nonNull("String"),
          extensions: {
            protobufField: {
              name: "user_id",
              typeFullName: "uint64",
              options: {
                "[graphql.field]": {
                  outputNullability: "NON_NULL",
                  inputNullability: "NULLABLE",
                  partialInputNullability: "NON_NULL",
                },
              },
            },
          },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
        status: {
          type: nullable("MessageStatus"),
          extensions: {
            protobufField: {
              name: "status",
              typeFullName:
                "testapis.extensions.field_nullability.Message.Status",
              options: {
                "[graphql.field]": {
                  outputNullability: "NULLABLE",
                  inputNullability: "NULLABLE",
                },
              },
            },
          },
        },
      },
    },
  },
);
export const MessageStatus = enumType({
  name: "MessageStatus",
  members: [{
    name: "DRAFT",
    value: 1,
    extensions: { protobufEnumValue: { name: "DRAFT" } },
  }, {
    name: "PUBLISHED",
    value: 2,
    extensions: { protobufEnumValue: { name: "PUBLISHED" } },
  }],
  extensions: {
    protobufEnum: {
      name: "Status",
      fullName: "testapis.extensions.field_nullability.Message.Status",
      package: "testapis.extensions.field_nullability",
    },
  },
});
"
`;

exports[`no_partial generates nexus DSLs with partial inputs: extensions/no_partial/no_partial_pb_nexus.ts 1`] = `
"// Code generated by protoc-gen-nexus. DO NOT EDIT.
// source: testapis/extensions/no_partial/no_partial.proto

/* eslint-disable */

import { inputObjectType, nonNull, nullable, objectType } from "nexus";
import { stringToNumber } from "proto-nexus";
import {
  NoPartialInputMessage as NoPartialInputMessage3,
  ParentMessage as ParentMessage1,
  PartialableInputMessage as PartialableInputMessage2,
} from "./testapis/extensions/no_partial/no_partial_pb";

export type testapis$extensions$no_partial$ParentMessage = ParentMessage1;
export const ParentMessage = objectType({
  name: "ParentMessage",
  definition: (t) => {
    t.field("partialableInputMessage", {
      type: nonNull("PartialableInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getPartialableInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "partialable_input_message",
          typeFullName:
            "testapis.extensions.no_partial.PartialableInputMessage",
        },
      },
    });
    t.field("noPartialInputMessage", {
      type: nonNull("NoPartialInputMessage"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getNoPartialInputMessage();
        if (value == null) {
          throw new Error("Cannot return null for non-nullable field");
        }
        return value;
      },
      extensions: {
        protobufField: {
          name: "no_partial_input_message",
          typeFullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        },
      },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof ParentMessage1;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$ParentMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.ParentMessage",
      name: "ParentMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$PartialableInputMessage =
  PartialableInputMessage2;
export const PartialableInputMessage = objectType({
  name: "PartialableInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof PartialableInputMessage2;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$PartialableInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.PartialableInputMessage",
      name: "PartialableInputMessage",
      package: "testapis.extensions.no_partial",
    },
  },
});

export type testapis$extensions$no_partial$NoPartialInputMessage =
  NoPartialInputMessage3;
export const NoPartialInputMessage = objectType({
  name: "NoPartialInputMessage",
  definition: (t) => {
    t.field("id", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getId();
        return value.toString();
      },
      extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
    });
    t.field("body", {
      type: nonNull("String"),
      description: "Required.",
      resolve: (source) => {
        const value = source.getBody();
        return value;
      },
      extensions: { protobufField: { name: "body", typeFullName: "string" } },
    });
  },
  isTypeOf: (data: unknown) => {
    return data instanceof NoPartialInputMessage3;
  },
  sourceType: {
    module: __filename,
    export: "testapis$extensions$no_partial$NoPartialInputMessage",
  },
  extensions: {
    protobufMessage: {
      fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
      name: "NoPartialInputMessage",
      package: "testapis.extensions.no_partial",
      options: { "[graphql.input_type]": { noPartial: true } },
    },
  },
});

export const ParentMessageInput = Object.assign(
  inputObjectType({
    name: "ParentMessageInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nonNull("PartialableInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nonNull("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessageInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      output.setPartialableInputMessage(
        PartialableInputMessageInput.toProto(input.partialableInputMessage),
      );
      output.setNoPartialInputMessage(
        NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
      );
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nonNull("PartialableInputMessageInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nonNull("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const ParentMessagePartialInput = Object.assign(
  inputObjectType({
    name: "ParentMessagePartialInput",
    definition: (t) => {
      t.field("partialableInputMessage", {
        type: nullable("PartialableInputMessagePartialInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "partialable_input_message",
            typeFullName:
              "testapis.extensions.no_partial.PartialableInputMessage",
          },
        },
      });
      t.field("noPartialInputMessage", {
        type: nullable("NoPartialInputMessageInput"),
        description: "Required.",
        extensions: {
          protobufField: {
            name: "no_partial_input_message",
            typeFullName:
              "testapis.extensions.no_partial.NoPartialInputMessage",
          },
        },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.ParentMessage",
        name: "ParentMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["ParentMessagePartialInput"],
    ): ParentMessage1 => {
      const output = new ParentMessage1();
      if (input.partialableInputMessage != null) {
        output.setPartialableInputMessage(
          PartialableInputMessagePartialInput.toProto(
            input.partialableInputMessage,
          ),
        );
      }
      if (input.noPartialInputMessage != null) {
        output.setNoPartialInputMessage(
          NoPartialInputMessageInput.toProto(input.noPartialInputMessage),
        );
      }
      return output;
    },
    _protoNexus: {
      fields: {
        partialableInputMessage: {
          type: nullable("PartialableInputMessagePartialInput"),
          extensions: {
            protobufField: {
              name: "partialable_input_message",
              typeFullName:
                "testapis.extensions.no_partial.PartialableInputMessage",
            },
          },
        },
        noPartialInputMessage: {
          type: nullable("NoPartialInputMessageInput"),
          extensions: {
            protobufField: {
              name: "no_partial_input_message",
              typeFullName:
                "testapis.extensions.no_partial.NoPartialInputMessage",
            },
          },
        },
      },
    },
  },
);

export const PartialableInputMessageInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessageInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const PartialableInputMessagePartialInput = Object.assign(
  inputObjectType({
    name: "PartialableInputMessagePartialInput",
    definition: (t) => {
      t.field("id", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nullable("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.PartialableInputMessage",
        name: "PartialableInputMessage",
        package: "testapis.extensions.no_partial",
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["PartialableInputMessagePartialInput"],
    ): PartialableInputMessage2 => {
      const output = new PartialableInputMessage2();
      if (input.id != null) {
        output.setId(stringToNumber(input.id));
      }
      if (input.body != null) {
        output.setBody(input.body);
      }
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nullable("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nullable("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);

export const NoPartialInputMessageInput = Object.assign(
  inputObjectType({
    name: "NoPartialInputMessageInput",
    definition: (t) => {
      t.field("id", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
      });
      t.field("body", {
        type: nonNull("String"),
        description: "Required.",
        extensions: { protobufField: { name: "body", typeFullName: "string" } },
      });
    },
    extensions: {
      protobufMessage: {
        fullName: "testapis.extensions.no_partial.NoPartialInputMessage",
        name: "NoPartialInputMessage",
        package: "testapis.extensions.no_partial",
        options: { "[graphql.input_type]": { noPartial: true } },
      },
    },
  }),
  {
    toProto: (
      input: NexusGen["inputTypes"]["NoPartialInputMessageInput"],
    ): NoPartialInputMessage3 => {
      const output = new NoPartialInputMessage3();
      output.setId(stringToNumber(input.id));
      output.setBody(input.body);
      return output;
    },
    _protoNexus: {
      fields: {
        id: {
          type: nonNull("String"),
          extensions: { protobufField: { name: "id", typeFullName: "uint64" } },
        },
        body: {
          type: nonNull("String"),
          extensions: {
            protobufField: { name: "body", typeFullName: "string" },
          },
        },
      },
    },
  },
);
"
`;
